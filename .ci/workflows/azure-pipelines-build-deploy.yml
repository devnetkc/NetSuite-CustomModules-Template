# @format

# Azure Pipelines -- NetSuite CI/CD yaml
# @description: Creates Sandbox release for a branch.  Copy and change variable group to prod for production releases.
# https://aka.ms/yaml

trigger: none

# Use branch policies in Azure to trigger on PR
pr: none

parameters:
  - name: cancelPriorDeployments
    displayName: Cancel prior deployments
    type: boolean
    default: true

variables:
  # Uses 2 Azure variable libraries
  - group: Base-NS-Deploy-Vars # These values don't change between SB->Prod
  - group: sb-deploy-acct # Unique token values for Sandbox server account
stages:
  - stage: DeployProject
    displayName: Deploy cfm NetSuite
    jobs:
      - job: RunNPMScripts
        workspace:
          clean: all
        displayName: Build cfm NetSuite Update
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          - checkout: self
            clean: true
            persistCredentials: true
          - script: |
              # Leave detached head mode
              git checkout -b $(Build.SourceBranchName)
              # Get origin HEADBRANCH  to use for comparing against later
              git fetch origin production:refs/remotes/origin/$(HEADBRANCH)
              npm i 
              npm run setup-server --sourcebranch=$(SOURCEBRANCH) --headbranch=$(HEADBRANCH) --account=$(ACCOUNT) --authid=$(AUTHID) --tokenid=$ENV_TOKENID --tokensecret=$ENV_TOKENSECRET
              # Run tests before deploying now that dependencies are properly loaded in manifest and deploy.xml created
              npm run test-ci
              # Uncomment line below if not using a release pipeline to deploy to NetSuite here instead
              # npm run deploy-pipeline
            env:
              # NetSuite Secret Token within Azure Library/Variables
              ENV_TOKENSECRET: $(TOKENSECRET)
              # NetSuite Secret Token ID within Azure Library/Variables
              ENV_TOKENID: $(TOKENID)

          # Publish test results to Azure
#          - task: PublishTestResults@2
#            inputs:
#              testResultsFormat: 'JUnit'
#              testResultsFiles: '**/test-report*.xml'
#              failTaskOnFailedTests: true
#              testRunTitle: 'NetSuite Module Deployment Tests'

# Publish artifact to Azure for use in Release pipeline
# Alternative would be to deploy in RunNPMScripts step
#          - task: CopyFiles@2
#            inputs:
#              contents: |
#               **
#                !**/node_modules/**
#                !**/.vscode/**
#                !**/docs/**
#                !**/resources/**
#                !**/__tests__/**
#              targetFolder: $(Build.ArtifactStagingDirectory)
#          - task: PublishBuildArtifacts@1
#            inputs:
#              pathToPublish: $(Build.ArtifactStagingDirectory)
#              artifactName: Build-$(buildLabel)
